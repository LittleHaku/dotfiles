#!/bin/bash

set -e

# Color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color
OVERWRITE='\e[1A\e[K'

# Emoji/symbols
CHECK_MARK="${GREEN}✓${NC}"
X_MARK="${RED}✗${NC}"
ARROW="${BLUE}▶${NC}"

# Variables
DOTFILES_DIR="$HOME/dotfiles"
DOTFILES_REPO="https://github.com/LittleHaku/dotfiles.git"
TASK=""

# Task management functions
function __task {
    if [[ $TASK != "" ]]; then
        printf "${OVERWRITE}${CHECK_MARK} ${GREEN}${TASK}${NC}\n"
    fi
    TASK=$1
    printf "${BLUE}[ ] ${TASK}${NC}\n"
}

function _task_done {
    printf "${OVERWRITE}${CHECK_MARK} ${GREEN}${TASK}${NC}\n"
    TASK=""
}

function _task_error {
    printf "${OVERWRITE}${X_MARK} ${RED}${TASK} - ERROR${NC}\n"
    echo -e "${RED}$1${NC}"
    exit 1
}

# Command execution with error handling
function _cmd {
    if ! eval "$1" >/dev/null 2>&1; then
        _task_error "Command failed: $1"
    fi
}

# Detect OS
function detect_os {
    if [[ -f /etc/os-release ]]; then
        source /etc/os-release
        echo $ID
    else
        echo "unknown"
    fi
}

# Ubuntu setup
function ubuntu_setup {
    __task "Updating package lists"
    _cmd "sudo apt-get update"

    if ! command -v ansible >/dev/null 2>&1; then
        __task "Installing Ansible"
        _cmd "sudo apt-get install -y software-properties-common"
        _cmd "sudo apt-add-repository -y ppa:ansible/ansible"
        _cmd "sudo apt-get update"
        _cmd "sudo apt-get install -y ansible"
    fi

    if ! command -v git >/dev/null 2>&1; then
        __task "Installing Git"
        _cmd "sudo apt-get install -y git"
    fi

    if ! command -v python3 >/dev/null 2>&1; then
        __task "Installing Python3"
        _cmd "sudo apt-get install -y python3 python3-pip"
    fi
}

# Arch/Endeavour setup
function arch_setup {
    __task "Updating package database"
    _cmd "sudo pacman -Sy --noconfirm"

    if ! command -v ansible >/dev/null 2>&1; then
        __task "Installing Ansible"
        _cmd "sudo pacman -S --noconfirm ansible"
    fi

    if ! command -v git >/dev/null 2>&1; then
        __task "Installing Git"
        _cmd "sudo pacman -S --noconfirm git"
    fi

    if ! command -v python3 >/dev/null 2>&1; then
        __task "Installing Python"
        _cmd "sudo pacman -S --noconfirm python python-pip"
    fi
}

# Main execution
function main {
    echo -e "${ARROW} ${BLUE}Starting dotfiles setup...${NC}\n"

    # Detect OS
    OS=$(detect_os)
    __task "Detected OS: $OS"
    _task_done

    # Setup based on OS
    case $OS in
        ubuntu)
            ubuntu_setup
            ;;
        endeavouros|arch)
            arch_setup
            ;;
        *)
            _task_error "Unsupported OS: $OS. This script only supports Ubuntu and Endeavour OS (Arch)."
            ;;
    esac

    # Clone or update dotfiles repository
    if [[ ! -d "$DOTFILES_DIR" ]]; then
        __task "Cloning dotfiles repository"
        _cmd "git clone $DOTFILES_REPO $DOTFILES_DIR"
    else
        __task "Updating dotfiles repository"
        _cmd "git -C $DOTFILES_DIR pull"
    fi
    _task_done

    # Change to dotfiles directory
    cd "$DOTFILES_DIR"

    # Install Ansible Galaxy requirements if they exist
    if [[ -f "requirements.yml" ]]; then
        __task "Installing Ansible Galaxy requirements"
        _cmd "ansible-galaxy install -r requirements.yml"
        _task_done
    fi

    # Run the Ansible playbook
    __task "Running Ansible playbook"
    if [[ -f "main.yml" ]]; then
        ansible-playbook main.yml --ask-become-pass "$@"
    elif [[ -f "playbook.yml" ]]; then
        ansible-playbook playbook.yml --ask-become-pass "$@"
    elif [[ -f "site.yml" ]]; then
        ansible-playbook site.yml --ask-become-pass "$@"
    else
        _task_error "No playbook found (main.yml, playbook.yml, or site.yml)"
    fi
    _task_done

    echo -e "\n${CHECK_MARK} ${GREEN}Dotfiles setup completed successfully!${NC}"
    echo -e "${ARROW} ${YELLOW}You may need to restart your shell or reboot to see all changes.${NC}"
    echo -e "${ARROW} ${BLUE}Tmux reminder: Start tmux and press Ctrl+s then I to install plugins${NC}"
}

# Check if running as root
if [[ $EUID -eq 0 ]]; then
    echo -e "${X_MARK} ${RED}Don't run this script as root!${NC}"
    exit 1
fi

# Run main function
main "$@"
