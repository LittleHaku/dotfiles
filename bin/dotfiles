#!/bin/bash
set -e # Exit immediately if a command exits with a non-zero status.

# --- Configuration ---
DOTFILES_DIR_DEFAULT="$HOME/dotfiles"
DOTFILES_REPO_HTTPS_DEFAULT="https://github.com/LittleHaku/dotfiles.git"
# DOTFILES_REPO_SSH_DEFAULT="git@github.com:LittleHaku/dotfiles.git" # Not needed for initial bootstrap

# --- Bootstrap for curl | bash ---
# This section determines if the script is running from a full checkout or via curl.

CURRENT_SCRIPT_PATH_RAW="${BASH_SOURCE[0]}"
SCRIPT_DIR_CANDIDATE=""

if [[ -n "$CURRENT_SCRIPT_PATH_RAW" ]]; then
    DN_OUTPUT="$(dirname "$CURRENT_SCRIPT_PATH_RAW")"
    # Check if dirname output is a directory; it might not be for /dev/fd/xx in some edge cases
    # or if BASH_SOURCE[0] is just "bash" (dirname gives ".")
    if [[ -d "$DN_OUTPUT" ]]; then
        # Use a subshell to avoid changing current PWD of main script
        SCRIPT_DIR_CANDIDATE=$(cd "$DN_OUTPUT" && pwd -P)
    fi
fi

# If SCRIPT_DIR_CANDIDATE is empty, ".", or same as PWD, it's likely curl|bash or script run from its own dir.
# The key is that ../lib won't be found relative to /dev/fd/XX.
if [[ -z "$SCRIPT_DIR_CANDIDATE" ]] || [[ "$SCRIPT_DIR_CANDIDATE" == "." ]] || [[ "$SCRIPT_DIR_CANDIDATE" == "$(pwd -P)" ]] || [[ "$SCRIPT_DIR_CANDIDATE" == "/proc/"*"/fd" ]]; then
    # Force bootstrap by ensuring probe path won't exist for curl|bash
    # For local execution (e.g. ./bin/dotfiles from repo root), SCRIPT_DIR_CANDIDATE might be PWD/bin
    # so we need to be careful not to always force bootstrap.
    # The /proc/*/fd check is a strong indicator of curl|bash.
    # A more robust check is if the calculated lib dir actually exists.
    # Let's calculate the probe path and then check its existence.
    # If SCRIPT_DIR_CANDIDATE is /foo/bar/bin, then probe is /foo/bar/lib
    # If SCRIPT_DIR_CANDIDATE is /proc/self/fd, then probe is /proc/self/lib (which won't exist)
    ABSOLUTE_LIB_DIR_PROBE="${SCRIPT_DIR_CANDIDATE}/../lib"
    if command -v realpath &>/dev/null; then
        ABSOLUTE_LIB_DIR_PROBE=$(realpath -m "$ABSOLUTE_LIB_DIR_PROBE" 2>/dev/null || echo "$ABSOLUTE_LIB_DIR_PROBE")
    fi
else
    # SCRIPT_DIR_CANDIDATE seems to be a valid distinct directory for the script
    LIB_DIR_RELATIVE_PATH="../lib"
    ABSOLUTE_LIB_DIR_PROBE="$SCRIPT_DIR_CANDIDATE/$LIB_DIR_RELATIVE_PATH"
    if command -v realpath &>/dev/null; then
        ABSOLUTE_LIB_DIR_PROBE=$(realpath -m "$ABSOLUTE_LIB_DIR_PROBE" 2>/dev/null || echo "$ABSOLUTE_LIB_DIR_PROBE")
    fi
fi

PROBE_LIB_FILE="utils.sh"

# The core bootstrap condition: if the lib/utils.sh is NOT found where expected.
if [[ ! -f "$ABSOLUTE_LIB_DIR_PROBE/$PROBE_LIB_FILE" ]]; then
    echo -e "\033[1;33mBootstrapping: Library files not found (expected near '$ABSOLUTE_LIB_DIR_PROBE').\033[0m"
    echo -e "\033[1;33mAssuming curl | bash execution or incomplete setup.\033[0m"
    echo -e "\033[0;34mAttempting to clone/update dotfiles repository to '$DOTFILES_DIR_DEFAULT'...\033[0m"

    if ! command -v git &>/dev/null; then
        echo "Git not found. Attempting to install..." >&2
        if command -v apt-get &>/dev/null; then
            sudo apt-get update && sudo apt-get install -y git
        elif command -v pacman &>/dev/null; then
            sudo pacman -Sy --noconfirm git
        elif command -v dnf &>/dev/null; then sudo dnf install -y git
        elif command -v yum &>/dev/null; then sudo yum install -y git
        elif command -v zypper &>/dev/null; then sudo zypper install -y git
        else
            echo -e "\033[0;31mError: Could not determine package manager to install Git. Please install Git manually and re-run.\033[0m" >&2
            exit 1
        fi
        if ! command -v git &>/dev/null; then
            echo -e "\033[0;31mError: Git installation failed or not found after attempt. Please install Git manually.\033[0m" >&2
            exit 1
        fi
    fi

    if [[ -d "$DOTFILES_DIR_DEFAULT/.git" ]]; then
        echo "Dotfiles directory '$DOTFILES_DIR_DEFAULT' already exists. Pulling latest changes..."
        current_pwd_bootstrap=$(pwd)
        cd "$DOTFILES_DIR_DEFAULT" || (echo "Error: Failed to cd to '$DOTFILES_DIR_DEFAULT'" >&2 && exit 1)
        git pull || (echo "Error: Git pull failed in '$DOTFILES_DIR_DEFAULT'" >&2 && exit 1)
        cd "$current_pwd_bootstrap" || (echo "Error: Failed to cd back to '$current_pwd_bootstrap'" >&2 && exit 1)
    else
        echo "Cloning '$DOTFILES_REPO_HTTPS_DEFAULT' into '$DOTFILES_DIR_DEFAULT'..."
        if [[ -e "$DOTFILES_DIR_DEFAULT" ]] && [[ ! -d "$DOTFILES_DIR_DEFAULT/.git" ]]; then
            # echo "Removing existing non-git directory '$DOTFILES_DIR_DEFAULT' before clone." # Optional: more verbose
            rm -rf "$DOTFILES_DIR_DEFAULT"
        fi
        # mkdir -p "$DOTFILES_DIR_DEFAULT" # git clone creates the target directory
        git clone "$DOTFILES_REPO_HTTPS_DEFAULT" "$DOTFILES_DIR_DEFAULT" || (echo "Error: Git clone failed" >&2 && exit 1)
    fi

    CLONED_SCRIPT_PATH="$DOTFILES_DIR_DEFAULT/bin/dotfiles"
    if [[ -f "$CLONED_SCRIPT_PATH" ]]; then
        echo -e "\033[0;32mBootstrap complete. Re-executing script from '$CLONED_SCRIPT_PATH'...\033[0m"
        exec bash "$CLONED_SCRIPT_PATH" "$@"
        echo -e "\033[0;31mError: exec failed for '$CLONED_SCRIPT_PATH'\033[0m" >&2 # Should not be reached
        exit 1
    else
        echo -e "\033[0;31mError: Cloned script not found at '$CLONED_SCRIPT_PATH'.\033[0m" >&2
        echo -e "\033[0;31mPlease check the repository structure and clone manually if needed.\033[0m" >&2
        exit 1
    fi
# else
    # If bootstrap condition is NOT met, ABSOLUTE_LIB_DIR_PROBE is the correct path to lib.
    # No explicit "else" needed here for setting ABSOLUTE_LIB_DIR, it's handled below.
fi
# --- End of Bootstrap section ---

# If we are here, it means we are NOT in the bootstrap re-execution phase,
# OR bootstrap was skipped because libs were found.
# We need ABSOLUTE_LIB_DIR to be correctly set for sourcing.

# Re-calculate SCRIPT_REAL_DIR and ABSOLUTE_LIB_DIR for the current execution context.
# This is important because after bootstrap, we are running the *cloned* script,
# or if bootstrap was skipped, we are running the original script and need its lib path.
CURRENT_SCRIPT_PATH_FINAL="${BASH_SOURCE[0]}"
# Resolve symlinks to get the true script path
while [[ -L "$CURRENT_SCRIPT_PATH_FINAL" ]]; do
    CURRENT_SCRIPT_DIR_FINAL="$(cd -P "$(dirname "$CURRENT_SCRIPT_PATH_FINAL")" >/dev/null 2>&1 && pwd)"
    CURRENT_SCRIPT_PATH_FINAL="$(readlink "$CURRENT_SCRIPT_PATH_FINAL")"
    [[ "$CURRENT_SCRIPT_PATH_FINAL" != /* ]] && CURRENT_SCRIPT_PATH_FINAL="$CURRENT_SCRIPT_DIR_FINAL/$CURRENT_SCRIPT_PATH_FINAL"
done
SCRIPT_REAL_DIR_FINAL="$(cd -P "$(dirname "$CURRENT_SCRIPT_PATH_FINAL")" >/dev/null 2>&1 && pwd)"
ABSOLUTE_LIB_DIR="$SCRIPT_REAL_DIR_FINAL/../lib" # Standard relative path from bin/ to lib/

# Normalize the path (e.g., /foo/bar/../baz -> /foo/baz)
if command -v realpath &>/dev/null; then
    ABSOLUTE_LIB_DIR=$(realpath -m "$ABSOLUTE_LIB_DIR" 2>/dev/null || echo "$ABSOLUTE_LIB_DIR")
fi

# Global variables (can be overridden by sourced files if they also declare them)
DOTFILES_DIR="$HOME/dotfiles"
DOTFILES_REPO_HTTPS="https://github.com/LittleHaku/dotfiles.git"
DOTFILES_REPO_SSH="git@github.com:LittleHaku/dotfiles.git"
SSH_KEY_PATH="$HOME/.ssh/id_ed25519"
WINDOWS_SSH_DIR=""
TASK=""
USE_SSH=false

# Source library files
# Errors in sourced files will now cause script to exit due to `set -e`
source "$ABSOLUTE_LIB_DIR/utils.sh"
source "$ABSOLUTE_LIB_DIR/os_detect.sh"
source "$ABSOLUTE_LIB_DIR/ssh_setup.sh"
source "$ABSOLUTE_LIB_DIR/package_manager.sh"
source "$ABSOLUTE_LIB_DIR/main_logic.sh"

# Check if running as root (after sourcing utils for X_MARK and RED)
if [[ $EUID -eq 0 ]]; then
    echo -e "${X_MARK} ${RED}Don't run this script as root! It will use 'sudo' where necessary.${NC}" >&2
    exit 1
fi

# Run the main execution logic, passing all script arguments
main_execution "$@"
