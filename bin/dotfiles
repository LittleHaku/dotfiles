#!/bin/bash

set -e

# Color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color
OVERWRITE='\e[1A\e[K'

# Emoji/symbols
CHECK_MARK="${GREEN}âœ“${NC}"
X_MARK="${RED}âœ—${NC}"
ARROW="${BLUE}â–¶${NC}"
KEY="${YELLOW}ðŸ”‘${NC}"
WARNING="${RED}âš ${NC}"

# Variables
DOTFILES_DIR="$HOME/dotfiles"
DOTFILES_REPO_HTTPS="https://github.com/LittleHaku/dotfiles.git"
DOTFILES_REPO_SSH="git@github.com:LittleHaku/dotfiles.git"
SSH_DIR="$HOME/.ssh"
SSH_KEY_PATH="$SSH_DIR/id_ed25519"
TASK=""

# Task management functions
function __task {
    if [[ $TASK != "" ]]; then
        printf "${OVERWRITE}${CHECK_MARK} ${GREEN}${TASK}${NC}\n"
    fi
    TASK=$1
    printf "${BLUE}[ ] ${TASK}${NC}\n"
}

function _task_done {
    printf "${OVERWRITE}${CHECK_MARK} ${GREEN}${TASK}${NC}\n"
    TASK=""
}

function _task_error {
    printf "${OVERWRITE}${X_MARK} ${RED}${TASK} - ERROR${NC}\n"
    echo -e "${RED}$1${NC}"
    exit 1
}

function _task_warning {
    printf "${OVERWRITE}${WARNING} ${YELLOW}${TASK} - WARNING${NC}\n"
    echo -e "${YELLOW}$1${NC}"
}

# Command execution with error handling
function _cmd {
    if ! eval "$1" >/dev/null 2>&1; then
        _task_error "Command failed: $1"
    fi
}

function _cmd_quiet {
    eval "$1" >/dev/null 2>&1
}

# Detect OS
function detect_os {
    if [[ -f /etc/os-release ]]; then
        source /etc/os-release
        echo $ID
    else
        echo "unknown"
    fi
}

# Check if SSH key exists and is valid
function check_ssh_key {
    if [[ -f "$SSH_KEY_PATH" && -f "$SSH_KEY_PATH.pub" ]]; then
        # Test if the key works with GitHub
        if ssh -T git@github.com 2>&1 | grep -q "successfully authenticated"; then
            return 0  # Key exists and works
        else
            return 1  # Key exists but doesn't work with GitHub
        fi
    else
        return 2  # No key exists
    fi
}

# Generate SSH key
function generate_ssh_key {
    __task "Creating SSH directory"
    _cmd "mkdir -p $SSH_DIR"
    _cmd "chmod 700 $SSH_DIR"
    _task_done

    echo -e "\n${KEY} ${CYAN}Setting up SSH key for GitHub authentication${NC}"
    read -p "Enter your email address for the SSH key: " EMAIL
    
    __task "Generating SSH key"
    _cmd "ssh-keygen -t ed25519 -C '$EMAIL' -f '$SSH_KEY_PATH' -N ''"
    _cmd "chmod 600 '$SSH_KEY_PATH'"
    _cmd "chmod 644 '$SSH_KEY_PATH.pub'"
    _task_done

    # Start SSH agent and add key
    __task "Adding SSH key to agent"
    _cmd "eval \$(ssh-agent -s)"
    _cmd "ssh-add '$SSH_KEY_PATH'"
    _task_done
}

# Display SSH key and instructions
function display_ssh_setup {
    echo -e "\n${KEY} ${YELLOW}SSH Key Setup Required${NC}"
    echo -e "${ARROW} Your SSH public key:"
    echo -e "${CYAN}$(cat $SSH_KEY_PATH.pub)${NC}"
    echo -e "\n${ARROW} ${YELLOW}Please follow these steps:${NC}"
    echo -e "   1. Copy the SSH key above (it's already in your clipboard if you have xclip/pbcopy)"
    echo -e "   2. Go to: ${BLUE}https://github.com/settings/ssh/new${NC}"
    echo -e "   3. Add a title (e.g., 'My Computer')"
    echo -e "   4. Paste the key and click 'Add SSH key'"
    echo -e "   5. Come back and press Enter to continue"
    
    # Try to copy to clipboard
    if command -v xclip >/dev/null 2>&1; then
        cat "$SSH_KEY_PATH.pub" | xclip -selection clipboard
        echo -e "   ${CHECK_MARK} ${GREEN}Key copied to clipboard!${NC}"
    elif command -v pbcopy >/dev/null 2>&1; then
        cat "$SSH_KEY_PATH.pub" | pbcopy
        echo -e "   ${CHECK_MARK} ${GREEN}Key copied to clipboard!${NC}"
    fi
    
    read -p "Press Enter after adding the SSH key to GitHub..."
}

# Test SSH connection to GitHub
function test_github_ssh {
    __task "Testing GitHub SSH connection"
    local max_attempts=3
    local attempt=1
    
    while [[ $attempt -le $max_attempts ]]; do
        if ssh -T git@github.com 2>&1 | grep -q "successfully authenticated"; then
            _task_done
            return 0
        else
            if [[ $attempt -eq $max_attempts ]]; then
                _task_error "Failed to authenticate with GitHub after $max_attempts attempts. Please check your SSH key setup."
            else
                echo -e "${WARNING} ${YELLOW}Authentication failed. Attempt $attempt/$max_attempts${NC}"
                echo -e "Please make sure you've added your SSH key to GitHub."
                read -p "Press Enter to try again..."
                ((attempt++))
            fi
        fi
    done
}

# Setup SSH authentication
function setup_ssh_auth {
    local ssh_status
    check_ssh_key
    ssh_status=$?
    
    case $ssh_status in
        0)
            echo -e "${CHECK_MARK} ${GREEN}SSH key already exists and works with GitHub${NC}"
            ;;
        1)
            echo -e "${WARNING} ${YELLOW}SSH key exists but not configured with GitHub${NC}"
            display_ssh_setup
            test_github_ssh
            ;;
        2)
            echo -e "${KEY} ${CYAN}No SSH key found. Setting up SSH authentication...${NC}"
            generate_ssh_key
            display_ssh_setup
            test_github_ssh
            ;;
    esac
}

# Ubuntu setup
function ubuntu_setup {
    __task "Updating package lists"
    _cmd "sudo apt-get update"
    
    if ! command -v ansible >/dev/null 2>&1; then
        __task "Installing Ansible"
        _cmd "sudo apt-get install -y software-properties-common"
        _cmd "sudo apt-add-repository -y ppa:ansible/ansible"
        _cmd "sudo apt-get update"
        _cmd "sudo apt-get install -y ansible"
    fi
    
    if ! command -v git >/dev/null 2>&1; then
        __task "Installing Git"
        _cmd "sudo apt-get install -y git"
    fi
    
    if ! command -v python3 >/dev/null 2>&1; then
        __task "Installing Python3"
        _cmd "sudo apt-get install -y python3 python3-pip"
    fi
    
    # Install clipboard tools
    if ! command -v xclip >/dev/null 2>&1; then
        __task "Installing clipboard tools"
        _cmd "sudo apt-get install -y xclip"
    fi
}

# Arch/Endeavour setup
function arch_setup {
    __task "Updating package database"
    _cmd "sudo pacman -Sy --noconfirm"
    
    if ! command -v ansible >/dev/null 2>&1; then
        __task "Installing Ansible"
        _cmd "sudo pacman -S --noconfirm ansible"
    fi
    
    if ! command -v git >/dev/null 2>&1; then
        __task "Installing Git"
        _cmd "sudo pacman -S --noconfirm git"
    fi
    
    if ! command -v python3 >/dev/null 2>&1; then
        __task "Installing Python"
        _cmd "sudo pacman -S --noconfirm python python-pip"
    fi
    
    # Install clipboard tools
    if ! command -v xclip >/dev/null 2>&1; then
        __task "Installing clipboard tools"
        _cmd "sudo pacman -S --noconfirm xclip"
    fi
}

# Clone or update repository
function setup_repository {
    if [[ ! -d "$DOTFILES_DIR" ]]; then
        __task "Cloning dotfiles repository (HTTPS)"
        _cmd "git clone $DOTFILES_REPO_HTTPS $DOTFILES_DIR"
        _task_done
        
        # Setup SSH for future pushes
        setup_ssh_auth
        
        __task "Switching repository to SSH"
        _cmd "git -C $DOTFILES_DIR remote set-url origin $DOTFILES_REPO_SSH"
        _task_done
    else
        __task "Repository already exists, updating"
        
        # Check if we're using HTTPS and switch to SSH if needed
        local current_remote=$(git -C "$DOTFILES_DIR" remote get-url origin)
        if [[ $current_remote == https* ]]; then
            echo -e "${ARROW} ${YELLOW}Repository is using HTTPS, setting up SSH...${NC}"
            setup_ssh_auth
            __task "Switching repository to SSH"
            _cmd "git -C $DOTFILES_DIR remote set-url origin $DOTFILES_REPO_SSH"
            _task_done
        fi
        
        __task "Pulling latest changes"
        _cmd "git -C $DOTFILES_DIR pull"
        _task_done
    fi
}

# Create basic playbook if none exists
function ensure_playbook {
    cd "$DOTFILES_DIR"
    
    # Check for existing playbooks
    if [[ -f "main.yml" || -f "playbook.yml" || -f "site.yml" ]]; then
        return 0
    fi
    
    __task "Creating basic Ansible playbook"
    cat > main.yml << 'EOF'
---
- name: Setup dotfiles
  hosts: localhost
  connection: local
  become: yes
  
  vars:
    user_home: "{{ ansible_env.HOME }}"
    
  tasks:
    - name: Install basic packages
      package:
        name:
          - git
          - vim
          - curl
          - wget
          - htop
          - tree
        state: present
    
    - name: Create directories
      file:
        path: "{{ user_home }}/{{ item }}"
        state: directory
        mode: '0755'
      loop:
        - .config
        - .local/bin
      become: no
    
    - name: Copy dotfiles
      copy:
        src: "{{ item }}"
        dest: "{{ user_home }}/{{ item | basename }}"
        backup: yes
        mode: preserve
      with_fileglob:
        - "files/.*"
      become: no
      ignore_errors: yes
      
    - name: Set Git configuration
      git_config:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        scope: global
      loop:
        - { name: "init.defaultBranch", value: "main" }
        - { name: "pull.rebase", value: "false" }
      become: no
      when: ansible_env.USER is defined

  handlers:
    - name: restart shell
      debug:
        msg: "Please restart your shell to apply changes"
EOF
    _task_done
}

# Main execution
function main {
    echo -e "${ARROW} ${BLUE}Starting dotfiles setup...${NC}\n"
    
    # Detect OS
    OS=$(detect_os)
    __task "Detected OS: $OS"
    _task_done
    
    # Setup based on OS
    case $OS in
        ubuntu)
            ubuntu_setup
            ;;
        endeavouros|arch)
            arch_setup
            ;;
        *)
            _task_error "Unsupported OS: $OS. This script only supports Ubuntu and Endeavour OS (Arch)."
            ;;
    esac
    
    # Setup repository
    setup_repository
    
    # Ensure we have a playbook
    ensure_playbook
    
    # Install Ansible Galaxy requirements if they exist
    if [[ -f "$DOTFILES_DIR/requirements.yml" ]]; then
        __task "Installing Ansible Galaxy requirements"
        _cmd "ansible-galaxy install -r $DOTFILES_DIR/requirements.yml"
        _task_done
    fi
    
    # Run the Ansible playbook
    __task "Running Ansible playbook"
    cd "$DOTFILES_DIR"
    if [[ -f "main.yml" ]]; then
        ansible-playbook main.yml --ask-become-pass "$@"
    elif [[ -f "playbook.yml" ]]; then
        ansible-playbook playbook.yml --ask-become-pass "$@"
    elif [[ -f "site.yml" ]]; then
        ansible-playbook site.yml --ask-become-pass "$@"
    else
        _task_error "No playbook found after setup"
    fi
    _task_done
    
    echo -e "\n${CHECK_MARK} ${GREEN}Dotfiles setup completed successfully!${NC}"
    echo -e "${ARROW} ${YELLOW}You may need to restart your shell or reboot to see all changes.${NC}"
    echo -e "${KEY} ${CYAN}Your repository is now configured with SSH for easy pushing!${NC}"
}

# Check if running as root
if [[ $EUID -eq 0 ]]; then
    echo -e "${X_MARK} ${RED}Don't run this script as root!${NC}"
    exit 1
fi

# Run main function
main "$@"
